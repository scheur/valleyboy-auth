version: 0.2

env:
  shell: bash
  variables:
    ARTIFACT_PATH: 'dist'
    NODE_OPTIONS: '--max_old_space_size=4096'

phases:
  install:
    runtime-versions:
      nodejs: 20
      python: 3.12
    commands:
      # Install build essentials first
      - yum install -y gcc-c++ make
      # Install UV pip
      - curl -LsSf https://astral.sh/uv/install.sh | sh
      # Add UV to PATH
      - export PATH="/root/.cargo/bin:$PATH"
      - uv --version
      # Explicitly set up Node
      - curl -sL https://rpm.nodesource.com/setup_20.x | bash -
      - yum install -y nodejs
      - node --version  # Verify node is installed
      - npm --version   # Verify npm is installed
      - npm install -g yarn
      # Add version checks back for logging
      - yarn --version
      - python --version
      
  pre_build:
    commands:
      # Verify required environment variables
      - |
        for var in API_ENDPOINT ARTIFACT_BUCKET; do
          if [ -z "${!var}" ]; then
            echo "Error: $var is not set"
            exit 1
          fi
        done
      # Install project dependencies
      - echo "Installing dependencies..."
      - cd frontend
      - yarn install --frozen-lockfile --network-timeout 1000000
      - cd ../lambda
      - uv pip install -r requirements.txt -t .
      - cd ..
      # Package CloudFormation template
      - echo "Packaging CloudFormation template..."
      - aws cloudformation package --template-file template.yaml --s3-bucket $ARTIFACT_BUCKET --output-template-file packaged.yaml

  build:
    commands:
      # Build Frontend
      - echo "Building frontend..."
      - cd frontend
      - |
        if ! printf "REACT_APP_API_ENDPOINT=%s" "$API_ENDPOINT" > .env.production; then
          echo "Failed to create .env.production"
          exit 1
        fi
      - cat .env.production
      - yarn build || exit 1
      - cd ..
      
      # Build Lambda Function
      - echo "Building lambda function..."
      - cd lambda
      - |
        if ! zip -r9 function.zip . -x "*.pyc" "*.git*" "tests/*" "node_modules/*"; then
          echo "Failed to create function.zip"
          exit 1
        fi
      - cd ..
      
  post_build:
    commands:
      - echo "Preparing artifacts..."
      - rm -rf $ARTIFACT_PATH
      - mkdir -p $ARTIFACT_PATH/frontend
      - cp packaged.yaml $ARTIFACT_PATH/
      - cp lambda/function.zip $ARTIFACT_PATH/
      - cp -r frontend/build/* $ARTIFACT_PATH/frontend/
      - echo "Build completed on $(date)"
      - ls -la $ARTIFACT_PATH
      # Add size checks
      - |
        MAX_SIZE_MB=250
        for file in $ARTIFACT_PATH/function.zip $ARTIFACT_PATH/packaged.yaml; do
          size=$(du -m "$file" | cut -f1)
          if [ "$size" -gt "$MAX_SIZE_MB" ]; then
            echo "Error: $file is larger than ${MAX_SIZE_MB}MB (${size}MB)"
            exit 1
          fi
        done

artifacts:
  base-directory: dist
  files:
    - '**/*'
  discard-paths: no

cache:
  paths:
    - frontend/node_modules/**/*
    - /root/.npm/**/*
    - /root/.cache/pip/**/*
    - /usr/local/lib/node_modules/**/*