AWSTemplateFormatVersion: '2010-09-09'
Description: 'Pipeline for valleyboy-auth application'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, prod]
    Description: Deployment environment
  CreateArtifactBucket:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: Whether to create a new artifact bucket

Resources:
  CheckBucketExists:
    Type: Custom::CheckBucketExists
    Properties:
      ServiceToken: !GetAtt CheckBucketFunction.Arn
      BucketName: !Sub ${AWS::StackName}-artifacts-${AWS::AccountId}

  CheckBucketFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt CheckBucketFunctionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          def handler(event, context):
            if event['RequestType'] == 'Delete':
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              return
            s3 = boto3.client('s3')
            bucket_name = event['ResourceProperties']['BucketName']
            try:
              s3.head_bucket(Bucket=bucket_name)
              exists = True
            except:
              exists = False
            cfnresponse.send(event, context, cfnresponse.SUCCESS, {'Exists': exists})
      Runtime: python3.12
      Timeout: 30

  CheckBucketFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3HeadBucket
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: s3:HeadBucket
                Resource: '*'

  ArtifactBucket:
    Type: AWS::S3::Bucket
    Condition: CreateNewBucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Sub ${AWS::StackName}-artifacts-${AWS::AccountId}
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldArtifacts
            Status: Enabled
            ExpirationInDays: 30

  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${AWS::StackName}-build
      ServiceRole: !GetAtt BuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:7.0
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: NODE_ENV
            Value: production
          - Name: ENVIRONMENT
            Value: !Ref Environment
          - Name: ARTIFACT_BUCKET
            Value: !Sub ${AWS::StackName}-artifacts-${AWS::AccountId}
          - Name: API_ENDPOINT
            Value: !Sub https://${AWS::StackName}-api-${AWS::AccountId}.execute-api.${AWS::Region}.amazonaws.com/${Environment}
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec.yaml
      Cache:
        Type: LOCAL
        Modes:
          - LOCAL_CUSTOM_CACHE
          - LOCAL_SOURCE_CACHE
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
          GroupName: !Sub /aws/codebuild/${AWS::StackName}
          StreamName: build-logs

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub ${AWS::StackName}-pipeline
      RoleArn: !GetAtt PipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Sub ${AWS::StackName}-artifacts-${AWS::AccountId}
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: '1'
                Provider: CodeStarSourceConnection
              Configuration:
                ConnectionArn: arn:aws:codestar-connections:us-east-1:811452274651:connection/0691892d-0b01-4c95-ac2b-2c4485e24e71
                FullRepositoryId: scheur/valleyboy-auth
                BranchName: main
                DetectChanges: true
              OutputArtifacts:
                - Name: SourceCode
              RunOrder: 1

        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref BuildProject
              InputArtifacts:
                - Name: SourceCode
              OutputArtifacts:
                - Name: BuildOutput
              RunOrder: 1

        - Name: DeployInfrastructure
          Actions:
            - Name: CreateChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: '1'
                Provider: CloudFormation
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                StackName: !Sub ${AWS::StackName}-${Environment}
                ChangeSetName: !Sub ${AWS::StackName}-changeset
                TemplatePath: BuildOutput::packaged.yaml
                Capabilities: CAPABILITY_IAM,CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
                RoleArn: !GetAtt CloudFormationRole.Arn
                ParameterOverrides: !Sub |
                  {
                    "Environment": "${Environment}"
                  }
              InputArtifacts:
                - Name: BuildOutput
              RunOrder: 1

            - Name: ExecuteChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: '1'
                Provider: CloudFormation
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                StackName: !Sub ${AWS::StackName}-${Environment}
                ChangeSetName: !Sub ${AWS::StackName}-changeset
              RunOrder: 2

        - Name: DeployFrontend
          Actions:
            - Name: DeployToS3
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: '1'
                Provider: S3
              Configuration:
                BucketName: !Sub ${AWS::StackName}-web-${AWS::AccountId}
                Extract: true
              InputArtifacts:
                - Name: BuildOutput
              RunOrder: 1

  CloudFormationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  BuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCloudFormationFullAccess
        - arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess
      Policies:
        - PolicyName: BuildPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource: 
                  - !GetAtt ArtifactBucket.Arn
                  - !Sub ${ArtifactBucket.Arn}/*
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - cognito-idp:*
                Resource: '*'
        - PolicyName: BedrockPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                Resource: 
                  - arn:aws:bedrock:us-west-2::foundation-model/anthropic.claude-3-sonnet-20241022-v2:0

  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess
      Policies:
        - PolicyName: PipelinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                  - s3:ListBucket
                Resource: 
                  - !GetAtt ArtifactBucket.Arn
                  - !Sub ${ArtifactBucket.Arn}/*
              - Effect: Allow
                Action:
                  - cloudformation:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: '*'
              - Effect: Allow
                Action:
                  - codestar-connections:UseConnection
                Resource: arn:aws:codestar-connections:us-east-1:811452274651:connection/0691892d-0b01-4c95-ac2b-2c4485e24e71

Conditions:
  CreateNewBucket: !Equals [!Ref CreateArtifactBucket, 'true']

Outputs:
  PipelineUrl:
    Description: CodePipeline URL
    Value: !Sub https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${Pipeline}