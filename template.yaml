AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Auth stack for valleyboy.io with quick updates

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod

Conditions:
  IsProd: !Equals [!Ref Environment, 'prod']

Globals:
  Function:
    Runtime: python3.12
    Architectures:
      - arm64
    Timeout: 29
    MemorySize: 1024

Resources:
  # DNS Cleanup Resources
  CheckDnsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: python3.12
      Role: !GetAtt CheckDnsFunctionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          
          def handler(event, context):
              if event['RequestType'] == 'Delete':
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                  return
                  
              route53 = boto3.client('route53')
              
              try:
                  # Try to get existing record
                  response = route53.list_resource_record_sets(
                      HostedZoneId=event['ResourceProperties']['HostedZoneId'],
                      StartRecordName=event['ResourceProperties']['RecordName'],
                      StartRecordType='A',
                      MaxItems='1'
                  )
                  
                  # Check if record exists and delete if it does
                  for record in response['ResourceRecordSets']:
                      if record['Name'] == event['ResourceProperties']['RecordName']:
                          route53.change_resource_record_sets(
                              HostedZoneId=event['ResourceProperties']['HostedZoneId'],
                              ChangeBatch={
                                  'Changes': [{
                                      'Action': 'DELETE',
                                      'ResourceRecordSet': record
                                  }]
                              }
                          )
              except Exception as e:
                  print(f"Error: {str(e)}")
                  # We don't fail if record doesn't exist
                  pass
                  
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {})

  CheckDnsFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: Route53Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - route53:ListResourceRecordSets
                  - route53:ChangeResourceRecordSets
                Resource: !Sub arn:aws:route53:::hostedzone/Z0784189181KVEHDOY62L

  CheckDnsRecord:
    Type: Custom::CheckDnsRecord
    Properties:
      ServiceToken: !GetAtt CheckDnsFunction.Arn
      HostedZoneId: Z0784189181KVEHDOY62L
      RecordName: !If [IsProd, "auth.valleyboy.io", !Sub "auth-${Environment}.valleyboy.io"]

  # Certificate for custom domain
  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: auth.valleyboy.io
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: auth.valleyboy.io
          HostedZoneId: Z0784189181KVEHDOY62L
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete

  # User Pool
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties: 
      UserPoolName: !Sub valleyboy-${Environment}
      AdminCreateUserConfig: 
        AllowAdminCreateUserOnly: false
      AutoVerifiedAttributes:
        - email
      UsernameAttributes: 
        - email
      Schema: 
        - Name: email
          Required: true
          Mutable: false
          AttributeDataType: String
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete

  # User Pool Client
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: !Sub valleyboy-client-${Environment}
      GenerateSecret: false
      PreventUserExistenceErrors: ENABLED
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      AllowedOAuthFlows:
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      CallbackURLs:
        - https://valleyboy.io/callback
      LogoutURLs:
        - https://valleyboy.io
      SupportedIdentityProviders:
        - COGNITO
      AllowedOAuthFlowsUserPoolClient: true
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete

  # Custom Domain
  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !If [IsProd, auth.valleyboy.io, !Sub auth-${Environment}.valleyboy.io]
      UserPoolId: !Ref CognitoUserPool
      CustomDomainConfig:
        CertificateArn: !Ref Certificate
    DependsOn: 
      - Certificate
      - CheckDnsRecord
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete

  # DNS Record
  DnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: Z0784189181KVEHDOY62L
      Name: !If [IsProd, auth.valleyboy.io, !Sub auth-${Environment}.valleyboy.io]
      Type: A
      AliasTarget:
        DNSName: !GetAtt UserPoolDomain.CloudFrontDistribution
        HostedZoneId: Z2FDTNDATAQYW2
        EvaluateTargetHealth: false
    DependsOn: UserPoolDomain
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete

Outputs:
  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref CognitoUserPool

  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient

  Domain:
    Description: Custom domain for the auth UI
    Value: !If [IsProd, auth.valleyboy.io, !Sub auth-${Environment}.valleyboy.io]

  LoginUrl:
    Description: Login URL
    Value: !Sub https://${UserPoolDomain.Domain}/login?client_id=${UserPoolClient}&response_type=token&scope=email+openid+profile&redirect_uri=https://valleyboy.io/callback