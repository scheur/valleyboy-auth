AWSTemplateFormatVersion: '2010-09-09'
Description: Cognito User Pool with Hosted UI and Chat Backend for valleyboy.io

Parameters:
  DomainPrefix:
    Type: String
    Default: valleyboy
    Description: Prefix for Cognito domain
  CustomDomain:
    Type: String
    Default: auth-dev.valleyboy.io
    Description: Custom domain for Cognito hosted UI

Resources:
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: valleyboy-users
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Schema:
        - Name: email
          Required: true
          Mutable: false
          AttributeDataType: String

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: valleyboy-web-client
      GenerateSecret: false
      RefreshTokenValidity: 30
      AuthSessionValidity: 3
      AllowedOAuthFlows:
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      CallbackURLs:
        - http://localhost:3000/callback
        - https://auth-dev.valleyboy.io/oauth2/idpresponse
        - https://valleyboy.io/callback
      LogoutURLs:
        - http://localhost:3000
        - https://auth-dev.valleyboy.io
        - https://valleyboy.io
      SupportedIdentityProviders:
        - COGNITO
      AllowedOAuthFlowsUserPoolClient: true
      EnableTokenRevocation: true
      EnablePropagateAdditionalUserContextData: false

  CognitoCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref CustomDomain
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref CustomDomain
          HostedZoneId: Z0784189181KVEHDOY62L

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    DependsOn: CognitoCertificate
    Properties:
      Domain: !Ref CustomDomain
      UserPoolId: !Ref UserPool
      CustomDomainConfig:
        CertificateArn: !Ref CognitoCertificate

  AuthDevDNSRecord:
    Type: AWS::Route53::RecordSet
    DependsOn: UserPoolDomain
    Properties:
      HostedZoneId: Z0784189181KVEHDOY62L
      Name: !Ref CustomDomain
      Type: CNAME
      TTL: 300
      ResourceRecords:
        - !GetAtt UserPoolDomain.CloudFrontDistribution

  ChatLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: BedrockAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                Resource: 
                  - !Sub arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-3-sonnet-20241022-v2:0

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-chat
      RetentionInDays: 14

  ChatLambda:
    Type: AWS::Lambda::Function
    DependsOn: [ChatLambdaRole, LogGroup]
    Properties:
      FunctionName: !Sub ${AWS::StackName}-chat
      Handler: index.handler
      Runtime: python3.12
      Code: 
        S3Bucket: !Sub valleyboy-lambda-code-${AWS::Region}
        S3Key: chat-function.zip
      Role: !GetAtt ChatLambdaRole.Arn
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: valleyboy-chat
          LOG_LEVEL: INFO
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:017000801446:layer:AWSLambdaPowertoolsPythonV2:46

  ChatApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ValleyboyChatApi
      EndpointConfiguration:
        Types:
          - REGIONAL

  ChatResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ChatApi.RootResourceId
      PathPart: chat
      RestApiId: !Ref ChatApi

  ChatMethod:
    Type: AWS::ApiGateway::Method
    DependsOn: [ChatResource, ChatAuthorizer]
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ChatLambda.Arn}/invocations
      ResourceId: !Ref ChatResource
      RestApiId: !Ref ChatApi
      AuthorizerId: !Ref ChatAuthorizer

  ChatAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: CognitoUserPoolAuthorizer
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      RestApiId: !Ref ChatApi
      ProviderARNs:
        - !GetAtt UserPool.Arn

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: [ChatMethod]
    Properties:
      RestApiId: !Ref ChatApi

  ApiStage:
    Type: AWS::ApiGateway::Stage
    DependsOn: ApiDeployment
    Properties:
      DeploymentId: !Ref ApiDeployment
      RestApiId: !Ref ChatApi
      StageName: dev

Outputs:
  UserPoolId:
    Description: The ID of the Cognito User Pool
    Value: !Ref UserPool
  UserPoolClientId:
    Description: The ID of the Cognito User Pool Client
    Value: !Ref UserPoolClient
  CustomDomainName:
    Description: The Cognito custom domain
    Value: !Ref CustomDomain
  CertificateArn:
    Description: The ARN of the ACM certificate
    Value: !Ref CognitoCertificate
  ApiEndpoint:
    Description: The API Gateway endpoint URL
    Value: !Sub https://${ChatApi}.execute-api.${AWS::Region}.amazonaws.com/dev/chat